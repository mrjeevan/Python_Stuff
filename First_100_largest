{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled",
      "provenance": [],
      "authorship_tag": "ABX9TyOOA/Mtg/deEv/WFH3L0T8l",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mrjeevan/Python_Stuff/blob/master/First_100_largest\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XtxPaDCNEGXn"
      },
      "source": [
        "from random import randint\n",
        "_from = -999999\n",
        "_to = 999999"
      ],
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vGYjRzIjEE1X",
        "outputId": "9b75c4ec-4f31-4ff8-81f1-b640958ca021",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "%%time\n",
        "global top\n",
        "top = []\n",
        "for _ in range(9000000):\n",
        "    input_stream_data = randint(_from,_to)\n",
        "\n",
        "    if len(top)<=100:\n",
        "        for i in range(len(top)):\n",
        "            # print(top[i] , input_stream_data)\n",
        "            if top[i] < input_stream_data:\n",
        "                top.insert(i,input_stream_data)\n",
        "                break\n",
        "    else:\n",
        "        for i in range(len(top)):\n",
        "            # print(top[i] , input_stream_data)\n",
        "            if top[i] < input_stream_data:\n",
        "                top[i] = input_stream_data\n",
        "                break\n",
        "    \n",
        "print(top)\n"
      ],
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[]\n",
            "CPU times: user 14.3 s, sys: 2.96 ms, total: 14.3 s\n",
            "Wall time: 14.3 s\n",
            "Parser   : 510 ms\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VuL_ApLFEJD6",
        "outputId": "d8f625cc-af1c-4773-a649-b96a07db6b21",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        }
      },
      "source": [
        "%%time\n",
        "global top1\n",
        "top1 = []\n",
        "for _ in range(9000000):\n",
        "    top1.append(randint(_from,_to))\n",
        "top1.sort(reverse=True)\n",
        "print(top1[:100])"
      ],
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[999999, 999999, 999998, 999998, 999998, 999998, 999998, 999998, 999998, 999997, 999997, 999997, 999997, 999997, 999997, 999996, 999996, 999995, 999995, 999995, 999995, 999995, 999995, 999994, 999994, 999994, 999994, 999993, 999993, 999993, 999993, 999993, 999993, 999992, 999992, 999992, 999991, 999991, 999991, 999991, 999991, 999990, 999990, 999990, 999990, 999990, 999989, 999989, 999989, 999988, 999988, 999988, 999988, 999987, 999987, 999987, 999987, 999987, 999987, 999987, 999986, 999986, 999986, 999986, 999985, 999985, 999985, 999985, 999985, 999984, 999984, 999984, 999984, 999984, 999983, 999983, 999983, 999983, 999983, 999983, 999983, 999983, 999983, 999983, 999982, 999982, 999982, 999982, 999981, 999981, 999981, 999981, 999981, 999980, 999980, 999980, 999980, 999980, 999979, 999979]\n",
            "CPU times: user 20.1 s, sys: 562 ms, total: 20.6 s\n",
            "Wall time: 20.6 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ccuD5WFbXP0e"
      },
      "source": [
        "Simulation\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pkk2nE_-Xe9j",
        "outputId": "5e46f3bf-7279-4b6f-d40e-44b5ff2a8e3e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "source": [
        "!pip install matplotlib\n",
        "import matplotlib.pyplot as plt \n",
        "from time import time"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (3.2.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (0.10.0)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.4.7)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.2.0)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.18.5)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.8.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler>=0.10->matplotlib) (1.15.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4LTZhkitZEId"
      },
      "source": [
        "### using Array method 1\n",
        "array1 = []\n",
        "for _ in range(10):\n",
        "  ini = time()\n",
        "  global top\n",
        "  top = []\n",
        "  for _ in range(900):\n",
        "      input_stream_data = randint(_from,_to)\n",
        "\n",
        "      if len(top)<=100:\n",
        "          for i in range(len(top)):\n",
        "            # print(top[i] , input_stream_data)\n",
        "              if top[i] < input_stream_data:\n",
        "                  top.insert(i,input_stream_data)\n",
        "                  break\n",
        "      else:\n",
        "          for i in range(len(top)):\n",
        "            # print(top[i] , input_stream_data)\n",
        "              if top[i] < input_stream_data:\n",
        "                  top[i] = input_stream_data\n",
        "                  break\n",
        "    \n",
        "  array1.append(time()-ini)\n"
      ],
      "execution_count": 136,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r_QRgb-fdOp8"
      },
      "source": [
        "### using Array method 2\n",
        "array2 = []\n",
        "for _ in range(10):\n",
        "  ini = time()\n",
        "  \n",
        "  global top1\n",
        "  top1 = []\n",
        "  for _ in range(900):\n",
        "    top1.append(randint(_from,_to))\n",
        "  top1.sort(reverse=True)\n",
        "\n",
        "      \n",
        "  array2.append(time()-ini)\n",
        "\n"
      ],
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "irqrX2t7cQhZ",
        "outputId": "6c35ad09-9a6d-43fd-dbf2-4e84003dde8c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        }
      },
      "source": [
        "### using heap method 3\n",
        "def heapify(arr, n, i): \n",
        "\tlargest = i # Initialize largest as root \n",
        "\tl = 2 * i + 1\t # left = 2*i + 1 \n",
        "\tr = 2 * i + 2\t # right = 2*i + 2 \n",
        "\n",
        "\n",
        "\tif l < n and arr[i] < arr[l]: \n",
        "\t\tlargest = l \n",
        "\n",
        "\n",
        "\tif r < n and arr[largest] < arr[r]: \n",
        "\t\tlargest = r \n",
        "\n",
        "\t\n",
        "\tif largest != i: \n",
        "\t\tarr[i],arr[largest] = arr[largest],arr[i] \n",
        "\t\theapify(arr, n, largest) \n",
        "\n",
        "\n",
        "def heapSort(arr): \n",
        "\tn = len(arr) \n",
        "\n",
        "\t\n",
        "\tfor i in range(n // 2 - 1, -1, -1): \n",
        "\t\theapify(arr, n, i) \n",
        "\n",
        "\t\n",
        "\tfor i in range(n-1, 0, -1): \n",
        "\t\tarr[i], arr[0] = arr[0], arr[i] \n",
        "\t\theapify(arr, i, 0) \n",
        "\n",
        "arr1 = [ 14, 27, 36, 4, 5, 100] \n",
        "arr = [0] \n",
        "heapSort(arr) \n",
        "\n",
        "for _ in range(200):\n",
        "  input_stream_data = randint(_from,_to)\n",
        "  if len(arr) == 0 :\n",
        "    arr.append(input_stream_data)\n",
        "  else:\n",
        "    \n",
        "    if arr[0]<input_stream_data :\n",
        "      arr.insert(0,input_stream_data)\n",
        "      arr[0]=input_stream_data\n",
        "      heapSort(arr) \n",
        "      \n",
        "    \n",
        "    \n",
        "print (\"Max 100 elements using max_heap are:\") \n",
        "mh = arr[-1:-100:-1]\n",
        "print(mh)"
      ],
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Max 100 elements using max_heap are:\n",
            "[993471, 971244, 943691, 943634, 926468, 924906, 905401, 905150, 904415, 904097, 874066, 873399, 855029, 847273, 845117, 845087, 836249, 796437, 786835, 764277, 757737, 755952, 754985, 742516, 738742, 735401, 731612, 703217, 693827, 681822, 677286, 673991, 671637, 670636, 654239, 652512, 646790, 626075, 618380, 615970, 600271, 590138, 563097, 562376, 561775, 554879, 540576, 540258, 537939, 531971, 529217, 521899, 507407, 491507, 486835, 464612, 453305, 449437, 447084, 443259, 434076, 433223, 431681, 416346, 408642, 375979, 372041, 349266, 345062, 326478, 323978, 314006, 311257, 309557, 285841, 285352, 278399, 262245, 259819, 246397, 238119, 235924, 230653, 220518, 218548, 216010, 205218, 202403, 188896, 181076, 156148, 150377, 114476, 106561, 98800, 70848, 70214, 50581, 11853]\n",
            "CPU times: user 14.9 ms, sys: 0 ns, total: 14.9 ms\n",
            "Wall time: 14.9 ms\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DryX2RGCjNzB",
        "outputId": "21bd64b0-62f1-4869-acaa-c52a0389081f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        }
      },
      "source": [
        "array3 = []\n",
        "for _ in range(10):\n",
        "  ini = time()\n",
        "  \n",
        "  %%time\n",
        "def heapify(arr, n, i): \n",
        "\tlargest = i # Initialize largest as root \n",
        "\tl = 2 * i + 1\t # left = 2*i + 1 \n",
        "\tr = 2 * i + 2\t # right = 2*i + 2 \n",
        "\n",
        "\n",
        "\tif l < n and arr[i] < arr[l]: \n",
        "\t\tlargest = l \n",
        "\n",
        "\n",
        "\tif r < n and arr[largest] < arr[r]: \n",
        "\t\tlargest = r \n",
        "\n",
        "\t\n",
        "\tif largest != i: \n",
        "\t\tarr[i],arr[largest] = arr[largest],arr[i] \n",
        "\t\theapify(arr, n, largest) \n",
        "\n",
        "\n",
        "def heapSort(arr): \n",
        "\tn = len(arr) \n",
        "\n",
        "\t\n",
        "\tfor i in range(n // 2 - 1, -1, -1): \n",
        "\t\theapify(arr, n, i) \n",
        "\n",
        "\t\n",
        "\tfor i in range(n-1, 0, -1): \n",
        "\t\tarr[i], arr[0] = arr[0], arr[i] \n",
        "\t\theapify(arr, i, 0) \n",
        "\n",
        "arr1 = [ 14, 27, 36, 4, 5, 100] \n",
        "arr = [0] \n",
        "heapSort(arr) \n",
        "\n",
        "for _ in range(200):\n",
        "  input_stream_data = randint(_from,_to)\n",
        "  if len(arr) == 0 :\n",
        "    arr.append(input_stream_data)\n",
        "  else:\n",
        "    \n",
        "    if arr[0]<input_stream_data :\n",
        "      arr.insert(0,input_stream_data)\n",
        "      arr[0]=input_stream_data\n",
        "      heapSort(arr) \n",
        "\n",
        "      \n",
        "  array3.append(time()-ini)"
      ],
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "CPU times: user 3 µs, sys: 0 ns, total: 3 µs\n",
            "Wall time: 5.96 µs\n",
            "CPU times: user 0 ns, sys: 4 µs, total: 4 µs\n",
            "Wall time: 6.2 µs\n",
            "CPU times: user 0 ns, sys: 3 µs, total: 3 µs\n",
            "Wall time: 5.96 µs\n",
            "CPU times: user 18 µs, sys: 0 ns, total: 18 µs\n",
            "Wall time: 21 µs\n",
            "CPU times: user 2 µs, sys: 0 ns, total: 2 µs\n",
            "Wall time: 4.05 µs\n",
            "CPU times: user 33 µs, sys: 0 ns, total: 33 µs\n",
            "Wall time: 34.8 µs\n",
            "CPU times: user 2 µs, sys: 0 ns, total: 2 µs\n",
            "Wall time: 4.29 µs\n",
            "CPU times: user 3 µs, sys: 0 ns, total: 3 µs\n",
            "Wall time: 5.01 µs\n",
            "CPU times: user 2 µs, sys: 0 ns, total: 2 µs\n",
            "Wall time: 3.58 µs\n",
            "CPU times: user 2 µs, sys: 0 ns, total: 2 µs\n",
            "Wall time: 3.81 µs\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OtYYcG_w0gfy",
        "outputId": "4d48fcd8-cb67-4ec9-f09b-d6a7b6c4819b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "plt.plot(array1)\n",
        "plt.plot(array2)\n",
        "plt.plot(array3)\n",
        "plt.show()"
      ],
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JpxHIYDb0qQx"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}